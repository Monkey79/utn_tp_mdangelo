Array en C:
#define QTY 5 //constante

int edades[QTY];
edades[4]=22;

IMPORTANTE : si pongo edades asi solo esto me devuelve la DIRECCION DE MEMORIA DEL PRIMER ELEMENTO DEL ARRAY
	Entoncs : edades === &edades[0] //es equivalente DA TRUE



Recibiendo array

//una forma de recibir (NO recomendable)
int initArr (int arr[], int limite, int valor) {

}

-----------------------------------------------------------
PARA PASARLO : 
	initArr(edades, 3, 0);
	Y PORQUE NO JUGANDO CON PUNTEROS ; initArr(edades+4, 3, 0);


//otra forma (SI recomendable) --> como se que es un array? bueno por el nombre "pArray"
int initArr (int *pArray, int limite, int valor) {

}

CUANDO PASAMOS UN ARRAY EN C => ESTAMOS PASANDO UNA DIRECCION DE MEMORIA. NADA MAS!!

QUe puedo validar en un array en C ? : NO mucho solo que lo que me pasen SEA una
direccion de memoria : -->ASI--> pArray != NULL

Para imprimir valor de un array pasado por parametro : pArray[1]

ANTES de un scanF usar "__fpurgue(stdin)" <stdio.h>

ACA TODO VALOR POSITIVO (INCLUYENDO EL CERO) ES OK Y SI ES NEGATIVO ES ERROR

repo profe 
https://github.com/davilamr/ClasesPL1_2019_2C






Notas:

cuando se trabaja con "string" en C:
	UNA FORMA DE ESCRIBIR CONSTANTES DEL TIPO STRING EN C

	1-char *saludo = "hola"; --> Esto sirve PERO hay que tener en cuenta : 
		Asi de esta manera el texto (que en un puntero) se guarda en una direccion de memoria que NO 
		se puede modificar por eso no podria modificar su contenido
		
		Para imprimirlo : printf("%s",saludo); //cuando en la mascara pongo %s quiere decir que espera un PUNTERO
		y como saludo ya ES un puntero no va "&"

	2-en este curso se acostumbra a usar los "string" asi 
			#define SALUDO "HOla"

	VER APUNTE DE LA CLASE 4
	

Algoritmo ordenamiento "burbujeo"

	while(estaDess == 1) {
	  estaDess = 0;
	  for(int = 0; i<(len-1); i++){
	aux = arra[i]
	   	arra[i] = arra[i+1]
	        arra[i+1] = aux;
	estaDess = 1;
	  }
	}

Vectores paralelos:
	Introduccion
		int edades[TOP]; -->Declaro un array
		edades --> la direccion de memoria donde esta el primer elemento (indice cero)
	
	Si quiero tener varios tipo de informacion de un alumno por ejemplo se usa arrays paralelos
	sabiendo que en el indice cero de cada array va a pertenecer a un alumno

	





	

